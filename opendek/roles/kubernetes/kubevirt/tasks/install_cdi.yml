# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2022 Intel Corporation

---

- name: create temporary directory
  tempfile:
    state: directory
    suffix: cdi-operator
  register: tmp_dir

- name: Download CDI Operator
  get_url:
    url: "{{ _cdi_operator_url }}"
    dest: "{{ tmp_dir.path }}/cdi-operator.yaml"
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"

- name: Download CDI Controller
  get_url:
    url: "{{ _cdi_cr_url }}"
    dest: "{{ tmp_dir.path }}/cdi-cr.yaml"
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"

- name: template kustomization.yml to tmp directory
  template:
    src: kustomization.yml.j2
    dest: "{{ tmp_dir.path }}/kustomization.yml"
    mode: u+rw
  loop:
    - cdi

- name: KV Operator Install
  command: kubectl apply -k .
  args:
    chdir: "{{ tmp_dir.path }}"
  changed_when: true

- name: CDI Operator Install
  command: kubectl apply -f "{{ tmp_dir.path }}/cdi-operator.yaml"
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"
  changed_when: true

- name: CDI Controller Install
  command: kubectl apply -f "{{ tmp_dir.path }}/cdi-cr.yaml"
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"
  changed_when: true

- name: check if proxy is enabled
  set_fact:
    _proxy_enabled: >
      {{ proxy_env is defined and
          (('http_proxy' in proxy_env and proxy_env['http_proxy'] | length) or
          ('no_proxy' in proxy_env and proxy_env['no_proxy'] | length) or
          ('https_proxy' in proxy_env and proxy_env['https_proxy'] | length)) | default(False) }}

- name: add proxy to kubectl CDI
  block:
    - name: template the proxy settings file
      template:
        src: proxy.yaml.j2
        dest: "{{ tmp_dir.path }}/proxy.yaml"
        mode: u+rw
    - name: template cdi proxy kustomization.yml to tmp directory
      template:
        src: proxy_kustomization.yml.j2
        dest: "{{ tmp_dir.path }}/kustomization.yml"
        mode: u+rw
    - name: apply the proxy settings
      command: kubectl apply -k .
      args:
        chdir: "{{ tmp_dir.path }}"
      changed_when: true
  when: _proxy_enabled

- name: label CDI namespace
  command: kubectl label namespace/{{ cdi_namespace }} ns=cdi --overwrite=true
  changed_when: true

- name: check if CDI traffic rule exists
  command: kubectl get networkpolicy cdi-upload-proxy-policy
  ignore_errors: yes
  register: cdi_exist
  changed_when: false

- name: Apply CDI traffic rules
  block:
    - name: copy traffic rule file for CDI
      copy:
        src: cdiNetworkPolicy.yaml
        dest: "{{ tmp_dir.path }}/cdiNetworkPolicy.yaml"
        mode: a=rw,u+x
    - name: set CDI traffic rule
      command: kubectl create -f {{ tmp_dir.path }}/cdiNetworkPolicy.yaml
      changed_when: true
  when: cdi_exist.rc != 0

- name: check if harbor is defined
  set_fact:
    _harbor_defined: >
      {{ se_controller is defined and
           'address' in se_controller and (se_controller['address'] | length) and
           'ports' in se_controller and 'harbor' in se_controller['ports'] | default(False) }}

- name: Apply CDI harbor rules
  block:
    - name: Template the harbor access file
      template:
        src: harbor.yaml.j2
        dest:  "{{ tmp_dir.path }}/harbor.yaml"
        mode: u+rw
    - name: Set insecure access to harbor
      command: kubectl patch cdi cdi --patch-file "{{ tmp_dir.path }}/harbor.yaml"  --type merge
      changed_when: true
  when: _harbor_defined

- name: remove temporary directory
  file:
    path: "{{ tmp_dir.path }}"
    state: absent
  when: tmp_dir.path is defined
