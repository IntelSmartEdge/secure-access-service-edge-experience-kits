# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020-2021 Intel Corporation

---
- name: create certificates for grafana
  include_role:
    name: kubernetes/certs
  vars:
    tls_secret_name: "{{ _proxy_secret_name }}"
    desired_namespace: "{{ telemetry_namespace }}"
    dns_names: ['grafana']

- name: wait until grafana secret is ready
  command: kubectl get secret/{{ _proxy_secret_name }} -n {{ telemetry_namespace }}
  retries: 10
  register: query
  changed_when: false
  until: query.rc == 0

- name: store certs in variables for later use
  block:
    - name: store root CA cert
      shell: set -o pipefail && kubectl get secrets/{{ _proxy_secret_name }} -n telemetry -o json | jq -r '.data."ca.crt"' | base64 -d
      register: telemetry_root_ca_cert
    - name: store grafana cert
      shell: set -o pipefail && kubectl get secrets/{{ _proxy_secret_name }} -n telemetry -o json | jq -r '.data."tls.crt"' | base64 -d
      register: telemetry_grafana_cert
    - name: store grafana key
      shell: set -o pipefail && kubectl get secrets/{{ _proxy_secret_name }} -n telemetry -o json | jq -r '.data."tls.key"' | base64 -d
      register: telemetry_grafana_key

- name: open port for Grafana
  include_role:
    name: infrastructure/firewall_open_ports
  vars:
    fw_open_ports: "{{ grafana_open_ports }}"

- name: check if Grafana release already exists
  command: helm status grafana -n {{ telemetry_namespace }}
  failed_when: false
  register: get_release_grafana
  changed_when: false

- name: install Grafana chart
  block:
    - name: create temporary directory
      tempfile:
        state: directory
        suffix: grafana
      register: tmp_dir

    - name: chown tmp directory
      file:
        path: "{{ tmp_dir.path }}"
        owner: "{{ ansible_user }}"
        group: "{{ project_group }}"
      become: yes

    - name: template values.yml to tmp directory
      template:
        src: values.yml
        dest: "{{ tmp_dir.path }}/"
        mode: preserve
        owner: "{{ ansible_user }}"
        group: "{{ project_group }}"
      become: yes

    - name: add default Helm repository
      command: helm repo add stable https://charts.helm.sh/stable
      changed_when: true

    - name: create Grafana chart template directory
      file:
        name: "{{ item }}"
        state: directory
        mode: a=rx,u+w
      loop:
        - "{{ _grafana_chart_dir }}/templates"
        - "{{ _grafana_chart_dir }}/templates/test"
      changed_when: true

    - name: copy grafana-configmap template to template directory
      copy:
        src: server-proxy-configmap.yml
        dest: "{{ _grafana_chart_dir }}/templates/server-proxy-configmap.yml"
        mode: "a+rw"

    - name: create Grafana files directory
      file:
        name: "{{ _grafana_chart_dir }}/files"
        state: directory
        mode: a=rx,u+w
      changed_when: true

    - name: download Grafana chart
      get_url:
        url: "{{ _grafana_chart_url }}/{{ item }}"
        dest: "{{ _grafana_chart_dir }}"
      register: result
      retries: "{{ number_of_retries }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"
      loop: "{{ _grafana_chart }}"

    - name: download Grafana chart templates
      get_url:
        url: "{{ _grafana_chart_url }}/{{ item }}"
        dest: "{{ _grafana_chart_dir }}/templates"
      register: result
      retries: "{{ number_of_retries }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"
      loop: "{{ _grafana_chart_templates }}"

    - name: download Grafana chart test templates
      get_url:
        url: "{{ _grafana_chart_url }}/{{ item }}"
        dest: "{{ _grafana_chart_dir }}/templates/test"
      register: result
      retries: "{{ number_of_retries }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"
      loop: "{{ _grafana_chart_test_templates }}"

    - name: create directories for persistent volumes
      file:
        path: "{{ _pv_dir }}/{{ item }}"
        state: directory
        mode: a=rx,u+w
      loop: "{{ _pv_names }}"
      become: yes

    - name: template definitions of persistent volumes
      template:
        src: "volume.yml"
        dest: "{{ tmp_dir.path }}/{{ item }}.yml"
        mode: preserve
      loop: "{{ _pv_names }}"
      changed_when: true

    - name: apply definitions of persistent volumes
      command: kubectl apply -n {{ telemetry_namespace }} -f "{{ tmp_dir.path }}/{{ item }}.yml"
      loop: "{{ _pv_names }}"
      changed_when: true

    - name: template prometheus-tls datasource
      template:
        src: "prometheus-tls-datasource.yml"
        dest: "{{ tmp_dir.path }}/prometheus-tls-datasource.yml"
        mode: preserve
      changed_when: true

    - name: add prometheus datasource to Grafana
      command: kubectl apply -f "{{ tmp_dir.path }}/prometheus-tls-datasource.yml"
      changed_when: true

    - name: create Grafana dashboards directories
      file:
        path: "{{ item }}"
        state: directory
        mode: a=rx,u+w
      loop:
        - "{{ _grafana_dashboards_prov }}"
        - "{{ _grafana_dashboards_conf }}"

    - name: copy Grafana dashboards provisioning file
      template:
        src: "default-dashboards-providers.yml"
        dest: "{{ _grafana_dashboards_prov }}"
        mode: preserve

    - name: copy example dashboard to controller
      copy:
        src: example-dashboard.json
        dest: "{{ _grafana_dashboards_conf }}/example-dashboard.json"
        mode: preserve

    - name: install patch utility
      package:
        name: patch
        state: present
      become: yes

    - name: apply _pod.tpl patch
      patch:
        src: _pod.tpl.patch
        dest: "{{ _grafana_chart_dir }}/templates/_pod.tpl"
        strip: 1
        binary: false
        backup: false

    - name: find backup files
      find:
        paths: "{{ _grafana_chart_dir }}/templates"
        patterns: "*.orig"
      register: backup_files

    - name: remove backup files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ backup_files.files }}"
      changed_when: true

    - name: install Grafana release
      command: >
        helm install grafana --namespace {{ telemetry_namespace }} \
        -f {{ tmp_dir.path }}/values.yml {{ _grafana_chart_dir }} \
        --timeout {{ _grafana_timeout }} \
        --wait
      changed_when: true

    - name: wait for Grafana
      block:
        - name: wait for Grafana pod to be ready
          command: >
            kubectl wait --selector=app.kubernetes.io/instance=grafana --namespace={{ telemetry_namespace }}
            --for=condition=Ready pods --timeout={{ _grafana_timeout }}
          changed_when: false
      rescue:
        - name: get grafana pod name
          command: kubectl get pod --selector=app.kubernetes.io/instance=grafana --namespace={{ telemetry_namespace }} --output=name
          register: grafana_pod_name
          changed_when: false
        - name: get grafana pod summary
          command: kubectl get --namespace={{ telemetry_namespace }} {{ grafana_pod_name.stdout }}
          changed_when: false
          failed_when: false
        - name: describe grafana pod
          command: kubectl describe --namespace={{ telemetry_namespace }} {{ grafana_pod_name.stdout }}
          changed_when: false
          failed_when: false
        - name: get containers in grafana pod
          command: kubectl get --namespace={{ telemetry_namespace }} {{ grafana_pod_name.stdout }} -o jsonpath='{.spec.initContainers[*].name}{" "}{.spec.containers[*].name}'
          changed_when: false
          failed_when: false
          register: grafana_pod_containers
        - name: get grafana containers' logs
          command: kubectl logs --namespace={{ telemetry_namespace }} {{ grafana_pod_name.stdout }} {{ item }}
          changed_when: false
          failed_when: false
          loop: "{{ grafana_pod_containers.stdout.split(' ') }}"
        - name: end the playbook
          fail:
            msg: "wait for grafana failed"

    - name: remove temporary directory
      file:
        path: "{{ tmp_dir.path }}"
        state: absent
      when: tmp_dir.path is defined
  when: get_release_grafana.rc != 0
