# INTEL CONFIDENTIAL
#
# Copyright 2021-2021 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

---
- name: Set global variables for icn sdewan ansible
  set_fact:
    project_user: "{{ ansible_user }}"

- name: configure calico ippools natoutgoing
  shell: "set -o pipefail && kubectl get ippools.crd.projectcalico.org -o yaml | sed  \"s/natOutgoing:.*$/natOutgoing: false/g\" | kubectl replace -f -"
  changed_when: true

- name: get icn-sdewan 
  git:
    repo: '{{ icn_sdwan_repo }}'
    dest:  "{{ icn_sdwan_dir }}"
    version: "{{ icn_commit }}"
    force: yes
  register: result
  retries: 5
  until: result is succeeded
  delay: 10

#[] Comment it when ICN release images to public repository
# - name: build pre-prod icn-sdewan images if necessary
#   block: 
#   - name: check if pre-prod cnf image existed
#     shell: "set -o pipefail && docker images -q integratedcloudnative/sdewan-cnf:pre-pro | wc -l"
#     register: cnf_image_existed
#     changed_when: true

#   - name: check if pre-prod ctrl image existed
#     shell: "set -o pipefail && docker images -q integratedcloudnative/sdewan-controller:pre-pro | wc -l"
#     register: ctrl_image_existed
#     changed_when: true
    
#   - name: build cnf image if necessary 
#     block: 
#     - name: set cnf image name & tag
#       lineinfile:
#         dest: "{{ icn_sdwan_dir }}/platform/cnf-openwrt/src/build_image.sh"
#         regexp: "^image_tag"
#         line: "image_tag=integratedcloudnative/sdewan-cnf:pre-pro"
#         state: present

#     - name: build cnf image
#       command: "bash ./build_image.sh"
#       args:
#         chdir: "{{ icn_sdwan_dir }}/platform/cnf-openwrt/src"
#     when: cnf_image_existed.stdout != "1"

#   - name: build ctrl image if necessary
#     block: 
#     - name: set ctrl image name & tag
#       lineinfile:
#         dest: "{{ icn_sdwan_dir }}/platform/crd-ctrlr/src/Makefile"
#         regexp: "^IMG"
#         line: "IMG ?= integratedcloudnative/sdewan-controller:pre-pro"
#         state: present

#     - name: build ctrl image
#       make: 
#         chdir: "{{ icn_sdwan_dir }}/platform/crd-ctrlr/src"
#         target: docker-build
#       environment: 
#         PATH: "{{ lookup('env', 'PATH') }}:/usr/local/go/bin"
#       register: result
#       until: result is succeeded
#     when: ctrl_image_existed.stdout != "1"

#   - name: use pre-prod image
#     block:
#       - name: change cnf helm chart target image
#         command: "yq -i '.containers.image = \"integratedcloudnative/sdewan-cnf:pre-pro\"' {{ icn_sdwan_dir }}platform/deployment/helm/sdewan_cnf/values.yaml"

#       - name: change ctrl helm chart target image
#         command: "yq -i '.spec.sdewan.image = \"integratedcloudnative/sdewan-controller:pre-pro\"' {{ icn_sdwan_dir }}platform/deployment/helm/sdewan_controllers/values.yaml"

- name: check if target scc image existed
  shell: "set -o pipefail && docker images -q {{ scc_image }}| wc -l"
  register: scc_existed
  changed_when: true

- name: build scc image if not existed
  block: 
  - name: build scc image with proxy
    command: docker build -f build/Dockerfile . -t "{{ scc_image }}" --network=host --build-arg "http_proxy={{ git_http_proxy }}" --build-arg "https_proxy={{ git_http_proxy }}"      
    args:
      chdir: "{{ icn_sdwan_dir }}/central-controller"
    become: yes
    register: result
    retries: 5
    until: result is succeeded
    delay: 10
    when: git_http_proxy | default(False)

  - name: build scc image without proxy
    command: docker build -f build/Dockerfile . -t "{{ scc_image }}" --network=host
    args:
      chdir: "{{ icn_sdwan_dir }}/central-controller"
    become: yes
    register: result
    retries: 5
    until: result is succeeded
    delay: 10
    when: not git_http_proxy | default(False)
  when: scc_existed.stdout != "1"

- name: prepare namespace for icn-sdewan
  template:
    src: "{{ role_path }}/templates/namespace.yaml.j2"
    dest: "{{ icn_sdwan_dir }}/namespace.yaml"
    mode: a=rx,u+w

- name: apply namespace for icn-sdewan
  command: "kubectl apply -f namespace.yaml "
  args:
    chdir: "{{ icn_sdwan_dir }}"
  changed_when: true

- name: prepare multus cr for icn-sdwan
  template:
    src: "{{ role_path }}/templates/multus-cr.yaml.j2"
    dest: "{{ icn_sdwan_dir }}/multus-cr.yaml"
    mode: a=rx,u+w

- name: apply multus cr for icn-sdwan 
  command: "kubectl apply -f multus-cr.yaml"
  args:
    chdir: "{{ icn_sdwan_dir }}"
  changed_when: true

- name: setup CRD controller
  block: 
    - name: prepare namespace for CRD controller
      template: 
        src: "{{ role_path }}/templates/namespace.yaml.j2"
        dest: "{{ icn_sdwan_dir }}/namespace.yaml"
        mode: a=rx,u+w

    - name: change ctrl helm chart target image
      command: "yq -i '.spec.sdewan.image = \"integratedcloudnative/sdewan-controller:0.5.2-1\"' {{ icn_sdwan_dir }}platform/deployment/helm/sdewan_controllers/values.yaml"

    - name: package crd chart
      command: "helm package sdewan_controllers"
      args:
        chdir: "{{ icn_sdwan_dir }}/platform/deployment/helm"

    # - name: deploy CRD controller via helm
    #   command: "helm install {{ crd_ctrl_chart_name }} ./controllers-0.1.0.tgz"
    #   args:
    #     chdir: "{{ icn_sdwan_dir }}/platform/deployment/helm"

- name: setup cnf
  block:
    - name: configure cluster network and cnf in default mode 
      block: 
      - name: configure cluster network for cnf
        template:
          src: "{{ role_path }}/templates/default-network.yaml.j2"
          dest: "{{ icn_sdwan_dir }}/default-networks.yaml"
          mode: a=rx,u+w
        with_items: "{{ network_conf }}"

      - name: apply configured cluster network
        command: "kubectl apply -f default-networks.yaml"
        args:
          chdir: "{{ icn_sdwan_dir }}"

      - name: change cnf helm chart target image
        command: "yq -i '.containers.image = \"integratedcloudnative/sdewan-cnf:0.5.2-1\"' {{ icn_sdwan_dir }}platform/deployment/helm/sdewan_cnf/values.yaml"

      - name: configure cnf ip address
        block: 
          - name: get ProviderNetwork gateway
            command: "kubectl get providernetworks.k8s.plugin.opnfv.org -n sdewan-system -o=jsonpath='{.items[?(@.kind==\"ProviderNetwork\")].spec.ipv4Subnets[0].gateway}' "
            register: pnetwork_gateway

          - name: prepare cnf provider network ip
            shell: "set -o pipefail && echo {{ pnetwork_gateway.stdout }} | awk -F '/' '{print $1}' - | awk -F '.' '{printf \"%s.%s.%s.%s\",$1,$2,$3,{{ icn_cnf_ip_suffix }}}' "
            register: pnet_ip

          - name: configure cnf provider network ip address
            command: "yq -i '.nfn[0].ipAddress = \"{{ pnet_ip.stdout }}\"' {{ icn_sdwan_dir }}platform/deployment/helm/sdewan_cnf/values.yaml"

          - name: configure cnf public ip
            command: "yq -i '.publicIpAddress = \"{{ pnet_ip.stdout }}\"' {{ icn_sdwan_dir }}platform/deployment/helm/sdewan_cnf/values.yaml"
          
          - name: get OVN-network gateway
            command: "kubectl get networks.k8s.plugin.opnfv.org -n sdewan-system -o=jsonpath='{.items[?(@.kind==\"Network\")].spec.ipv4Subnets[0].gateway}'"
            register: ovn_network_gateway

          - name: prepare cnf ovn-network network ip
            shell: "set -o pipefail && echo {{ ovn_network_gateway.stdout }} | awk -F '/' '{print $1}' - | awk -F '.' '{printf \"%s.%s.%s.%s\",$1,$2,$3,{{ icn_cnf_ip_suffix }}}' "
            register: onet_ip
          
          - name: configure cnf ovn-network ip address
            command: "yq -i '.nfn[1].ipAddress = \"{{ onet_ip.stdout }}\"' {{ icn_sdwan_dir }}/platform/deployment/helm/sdewan_cnf/values.yaml"

          - name: configure cnf default CIDR
            command: "yq -i '.defaultCIDR = \"{{ calico_cidr }}\"' {{ icn_sdwan_dir }}/platform/deployment/helm/sdewan_cnf/values.yaml"

    - name: preconfig certificate namespace
      command: "yq -i '.metadata.namespace = \"sdewan-system\"' {{ icn_sdwan_dir }}/platform/deployment/helm/cert/cnf_cert.yaml"

    - name: preconfig crd certs domain
      replace:
        path: "{{ icn_sdwan_dir }}/platform/deployment/helm/cert/cnf_cert.yaml"
        regexp: '\*.default.pod.cluster.local'
        replace: '*.sdewan-system.pod.cluster.local'

    - name: pre-regenerate certificate
      command: "kubectl apply -f cert/cnf_cert.yaml"
      args:
        chdir: "{{ icn_sdwan_dir }}/platform/deployment/helm"

    - name: setup cnf namespace
      replace:
        path: "{{ item }}"
        regexp: 'namespace:.*$'
        replace: 'namespace: sdewan-system'
      loop:
        - "{{ icn_sdwan_dir }}/platform/deployment/helm/sdewan_cnf/values.yaml"
        - "{{ icn_sdwan_dir }}/platform/deployment/helm/sdewan_cnf/templates/cm.yaml"

    - name: replace modified chart file
      copy: 
        src: "{{ role_path }}/templates/cnf-deployment-with-annotation.yaml"
        dest: "{{ icn_sdwan_dir }}/platform/deployment/helm/sdewan_cnf/templates/deployment.yaml"
        mode: '0664'

    - name: prepare provider network chart value
      command: "yq -i '.nfn[0].namespace = \"sdewan-system\"' {{ icn_sdwan_dir }}/platform/deployment/helm/sdewan_cnf/values.yaml"

    - name: prepare ovn-network chart value
      command: "yq -i '.nfn[1].namespace = \"sdewan-system\"' {{ icn_sdwan_dir }}/platform/deployment/helm/sdewan_cnf/values.yaml"
  
    - name: package cnf chart
      command: "helm package sdewan_cnf "
      args:
        chdir: "{{ icn_sdwan_dir }}/platform/deployment/helm"

    # - name: deploy cnf via helm
    #   command: "helm install {{ cnf_chart_name }} ./cnf-0.1.0.tgz"
    #   args:
    #     chdir: "{{ icn_sdwan_dir }}/platform/deployment/helm"

- name: Prepare sasectl command line tool
  block:
    - name: Prepare golang > 1.17
      block: 
        - name: create golang directory
          file:
            path: "{{ sase_golang_download_dest }}"
            state: directory
            owner: "{{ project_user }}"
            group: "{{ project_group  }}"
            mode: a=rx,u+w

        - name: Download golang
          get_url:
            url: "{{ sase_golang_download_url }}"
            dest: "{{ sase_golang_download_dest }}"
            checksum: "{{ sase_golang_download_checksum }}"
          register: golang_download
          retries: "{{ number_of_retries }}"
          until: golang_download is succeeded
          delay: "{{ retry_delay }}"

        - name: unarchive golang
          unarchive:
            src: "{{ golang_download.dest }}"
            dest: "{{ sase_golang_download_dest }}"
            copy: False
            mode: 0755
          become: yes

    - name: Build sasectl and prepare config file.
      block: 
        - name: get dependencies for sasectl 
          command: "{{ sase_golang_download_dest }}/go/bin/go mod tidy -compat=1.17"
          args:
            chdir: "{{ role_path }}/files/sasectl"
          become: yes

        - name: build sasectl
          command: "{{ sase_golang_download_dest }}/go/bin/go build -o sasectl ."
          args:
            chdir: "{{ role_path }}/files/sasectl"
          become: yes

        - name: build reg_cluster for sasectl
          command: "{{ sase_golang_download_dest }}/go/bin/go build -o reg_cluster ./reg_cluster.go"
          args:
            chdir: "{{ icn_sdwan_dir }}/central-controller/src/reg_cluster"
          become: yes

        - name: prepare config file
          template:
            src: "{{ role_path }}/templates/sasectl.yaml.j2"
            dest: /etc/sasectl.conf
            mode: 0666
          become: yes
    
    - name: move sasectl to user path
      copy:
        src: "{{ role_path }}/files/sasectl/sasectl"
        dest: /usr/local/bin/
        mode: 0755
      become: yes

    - name: setup bash completion
      shell:
        cmd: sasectl completion bash > /etc/bash_completion.d/sasectl
        creates: /etc/bash_completion.d/sasectl
      become: yes
