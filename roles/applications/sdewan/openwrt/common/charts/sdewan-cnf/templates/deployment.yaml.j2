# INTEL CONFIDENTIAL
#
# Copyright 2021-2021 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.metadata.name }}
  namespace: {{ .Values.metadata.namespace }}
  labels:
    sdewanPurpose: {{ .Values.metadata.labels }}
spec:
  progressDeadlineSeconds: {{ .Values.spec.progressDeadlineSeconds }}
  replicas: {{ .Values.spec.replicas }}
  selector:
    matchLabels:
      sdewanPurpose: {{ .Values.metadata.labels }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.strategy.maxSurge }}
      maxUnavailable: {{ .Values.strategy.maxUnavailable }}
    type: RollingUpdate
  template:
    metadata:
      annotations:
        k8s.plugin.opnfv.org/nfn-network: |-
          { "type": "ovn4nfv", "interface": [
          {{- range .Values.nfn }} {{- with . }}
            {
              "defaultGateway": "{{- .defaultGateway -}}",
              "interface": "{{- .interface -}}",
              "ipAddress": "{{- .ipAddress -}}",
              "name": "{{- .name -}}"
            } {{- .separate -}}
            {{- end }} {{- end }}
          ]}
        k8s.v1.cni.cncf.io/networks: '[{ "name": "ovn-networkobj","namespace": "default"}]'
      labels:
        sdewanPurpose: {{ .Values.metadata.labels }}
        cnf-account-secret: {{ .Values.metadata.passwdSecret }}
        cnf-cert-secret: {{ .Values.metadata.cert }}
    spec:
      containers:
      - command:
        - /usr/bin/sudo
        - /bin/sh
        - /tmp/sdewan/entrypoint.sh
        image: "{{ .Values.containers.image.registry }}{{ .Values.containers.image.name }}:{{ .Values.containers.image.tag }}"
        imagePullPolicy: {{ .Values.containers.imagePullPolicy }}
        name: {{ .Values.containers.name }}
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          privileged: true
          procMount: Default
        volumeMounts:
        - mountPath: /tmp/sdewan
          name: sdewan-sh
          readOnly: true
        - mountPath: /tmp/podinfo
          name: podinfo
          readOnly: true
        - mountPath: /tmp/sdewan/serving-certs
          name: cert
          readOnly: true
        - mountPath: /tmp/sdewan/account
          name: account
          readOnly: true
      nodeSelector:
        #{{ .Values.labelName }}: "{{ .Values.labelValue }}"
      restartPolicy: {{ .Values.restartPolicy }}
      volumes:
      - configMap:
          defaultMode: 420
          name: sdewan-sh
        name: sdewan-sh
      - name: podinfo
        downwardAPI:
          items:
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
      - name: cert
        secret:
          defaultMode: 420
          secretName: {{ .Values.metadata.cert }}
      - name: account
        secret:
          defaultMode: 420
          secretName: {{ .Values.metadata.passwdSecret }}
