# INTEL CONFIDENTIAL
#
# Copyright 2021-2021 Intel Corporation.
#
# This software and the related documents are Intel copyrighted materials, and your use of
# them is governed by the express license under which they were provided to you ("License").
# Unless the License provides otherwise, you may not use, modify, copy, publish, distribute,
# disclose or transmit this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or implied warranties,
# other than those that are expressly stated in the License.

---

- name: setup cnf
  block:
    - name: copy edge file to the master node
      template:
        src: "{{ role_path }}/templates/values.yaml.j2"
        dest: "{{ sdewan_helm_charts_dir }}/sdewan-cnf/values.yaml"
        mode: a=rx,u+w
      with_items: "{{ cnf_config }}"
      become: yes

    - name: cnf helm install
      command: "{{ helm_cmd }}  install sdewan-cnf ./sdewan-cnf/"
      args:
        chdir: "{{ sdewan_helm_charts_dir }}"
      become: yes

    - name: check the status of cnf pod
      shell: kubectl get deploy -n cnf | grep 0/1 | wc -l
      register: cnf_deploy
      retries: "{{ sdwan_number_of_retries }}"
      delay: "{{ sdwan_retry_delay }}"
      until: cnf_deploy.stdout | int == 0
      changed_when: false
      become: yes
  when: sdwan_labels is defined

- name: set ipsec tunnel
  block:
    - name: ipsec config with jinja2 template
      template:
        src: "{{ role_path }}/templates/ipsec_config.yaml.j2"
        dest: "{{ sdewan_helm_charts_dir }}/sdewan-cnf/ipsec_config.yaml"
        mode: a=rx,u+w
      with_items: "{{ cnf_config }}"
      become: yes

    - name: copy file to the master node
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: a=rx,u+w
      loop:
        - src: "{{ role_path }}/templates/ipsec_proposal.yaml.j2"
          dest: "{{ sdewan_helm_charts_dir }}/sdewan-cnf/ipsec_proposal.yaml"
      become: yes

    - name: check whether ipsec enable
      stat:
        path: "{{ sdewan_helm_charts_dir }}/sdewan-cnf/ipsec_config.yaml"
      register: sdewan_ipsec_enable
      become: yes

    - name: setup ipsec proposal
      command: "kubectl apply -f {{ item }}"
      args:
        chdir: "{{ sdewan_helm_charts_dir }}/sdewan-cnf"
      loop:
        - ipsec_proposal.yaml
      become: yes
      when:
        - sdewan_ipsec_enable.stat.size > {{ empty_file_size }}

    - name: wait for ipsec proposal up
      wait_for:
        timeout: 20
      become: yes
      when:
        - sdewan_ipsec_enable.stat.size > {{ empty_file_size }}

    - name: setup ipsec config
      command: "kubectl apply -f {{ item }}"
      args:
        chdir: "{{ sdewan_helm_charts_dir }}/sdewan-cnf"
      loop:
        - ipsec_config.yaml
      become: yes
      when:
        - sdewan_ipsec_enable.stat.size  > {{ empty_file_size }}
  when:
    - sdwan_labels is defined

- name: get cnf pod overlay ip
  block:
    - name: get cnf pod name
      command: kubectl get pod -l sdewanPurpose=sdewan-cnf -n cnf -o name
      register: podname
      become: yes
      failed_when: not podname.stdout

    - name: set pod name
      set_fact:
         cnfpod: "{{ podname.stdout }}"
      become: yes

    - name: get ADDR for SNAT or DNAT
      shell: IP={{ O_TUNNEL_NET }} && kubectl exec -n cnf {{ cnfpod }} -- ip a | grep "${IP%.*}" | awk '{match($0, /.+inet\s([^ /]*)/, a);print a[1];exit}'
      register: overlay_ip
      retries: "{{ sdwan_number_of_retries }}"
      delay: "{{ sdwan_retry_delay }}"
      until: overlay_ip.stdout
      become: yes

    - name: set pod name
      set_fact:
        over_lay_ip: "{{ overlay_ip.stdout }}"
      become: yes
  when:
    - sdewan_ipsec_enable.stat.size  > {{ empty_file_size }}
    - sdwan_labels is defined

- name: get crd tunnel rules
  block:
    - name: copy crd file to the master node
      template:
        src: "{{ role_path }}/templates/firewall_zone_1.yaml.j2"
        dest: "{{ sdewan_helm_charts_dir }}/sdewan-cnf/firewall_zone_1.yaml"
        mode: a=rx,u+w
      with_items:
        - "{{ cnf_config }}"
      become: yes

    - name: copy SNAT file to the master node
      template:
        src: "{{ role_path }}/templates/sdwanSNATConfigs.yaml.j2"
        dest: "{{ sdewan_helm_charts_dir }}/sdewan-cnf/sdwanSNATConfigs.yaml"
        mode: a=rx,u+w
      with_items: "{{ cnf_config }}"
      become: yes

    - name: copy DANT file to the master node
      template:
        src: "{{ role_path }}/templates/sdwanDNATConfigs.yaml.j2"
        dest: "{{ sdewan_helm_charts_dir }}/sdewan-cnf/sdwanDNATConfigs.yaml"
        mode: a=rx,u+w
      with_items: "{{ cnf_config }}"
      become: yes

    - name: check whether snat enable
      stat:
        path: "{{ sdewan_helm_charts_dir }}/sdewan-cnf/sdwanSNATConfigs.yaml"
      register: sdewan_snat_enable
      become: yes

    - name: check whether dnat enable
      stat:
        path: "{{ sdewan_helm_charts_dir }}/sdewan-cnf/sdwanDNATConfigs.yaml"
      register: sdewan_dnat_enable
      become: yes
  when: sdwan_labels is defined

- name: set NAT config
  block:
    - name: set crd tunnel rule
      command: "kubectl apply -f {{ item }}"
      args:
        chdir: "{{ sdewan_helm_charts_dir }}/sdewan-cnf"
      loop:
        - firewall_zone_1.yaml
      become: yes
  when:
    - sdewan_snat_enable.stat.size  > {{ empty_file_size }} or sdewan_dnat_enable.stat.size  > {{ empty_file_size }}
    - sdwan_labels is defined

- name: set SNAT config
  block:
    - name: set snat crd tunnel rule
      command: "kubectl apply -f {{ item }}"
      args:
        chdir: "{{ sdewan_helm_charts_dir }}/sdewan-cnf"
      loop:
        - sdwanSNATConfigs.yaml
      become: yes
  when:
    - sdewan_snat_enable.stat.size  > {{ empty_file_size }}
    - sdwan_labels is defined

- name: set DNAT config
  block:
    - name: set dnat crd tunnel rule
      command: "kubectl apply -f {{ item }}"
      args:
        chdir: "{{ sdewan_helm_charts_dir }}/sdewan-cnf"
      loop:
        - sdwanDNATConfigs.yaml
      become: yes
  when:
    - sdewan_dnat_enable.stat.size  > {{ empty_file_size }}
    - sdwan_labels is defined
